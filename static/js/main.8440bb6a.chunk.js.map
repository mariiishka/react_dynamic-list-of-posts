{"version":3,"sources":["contexts/PostsContext.ts","customHooks/usePostsContext.ts","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/api.ts","api/posts.ts","api/comments.ts","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["PostsContext","React","createContext","posts","setPosts","selectedPostId","setSelectedPostId","comments","setComments","usePostsContext","useContext","PostsList","memo","className","length","map","id","userId","title","type","onClick","handleClick","NewCommentForm","useState","userName","setUserName","userEmail","setUserEmail","userComment","setUserComment","handleChange","event","target","name","value","onSubmit","preventDefault","newComment","Date","valueOf","postId","body","email","onChange","placeholder","required","request","endpoint","method","fetch","then","response","ok","Error","status","statusText","json","getAllPosts","deleteComment","commentId","PostDetails","postDetails","setPostDetails","isCommentsVisible","setIsCommentsVisible","loadPostDetails","loadPostComments","useEffect","Promise","all","state","filteredComments","filter","comment","toDeleteComment","App","users","setUsers","loadPosts","getUserPosts","loadUsers","data","slice","Provider","Number","user","Boolean","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8440bb6a.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype PostsContextType = {\n  posts: Post[],\n  setPosts: (posts: Post[]) => void,\n  selectedPostId: number,\n  setSelectedPostId: (selectedPostId: number) => void,\n  comments: Comment[],\n  setComments: (comments: Comment[]) => void,\n};\n\nexport const PostsContext = React.createContext<PostsContextType>({\n  posts: [],\n  setPosts: () => {},\n  selectedPostId: 87,\n  setSelectedPostId: () => {},\n  comments: [],\n  setComments: () => {},\n});\n","import { useContext } from 'react';\nimport { PostsContext } from '../contexts/PostsContext';\n\nexport const usePostsContext = () => useContext(PostsContext);\n","import React from 'react';\nimport { usePostsContext } from '../../customHooks/usePostsContext';\nimport './PostsList.scss';\n\nexport const PostsList: React.FC = React.memo(() => {\n  const { posts, selectedPostId, setSelectedPostId } = usePostsContext();\n\n  const handleClick = (id: number) => {\n    if (id === selectedPostId) {\n      setSelectedPostId(0);\n    } else {\n      setSelectedPostId(id);\n    }\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.length\n          ? (\n            posts.map(({ id, userId, title }) => (\n              <li key={id} className=\"PostsList__item\">\n                <div>\n                  <b>{`[User #${userId}] `}</b>\n                  {title}\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    handleClick(id);\n                  }}\n                >\n                  {selectedPostId === id ? 'Close' : 'Open'}\n                </button>\n              </li>\n            ))\n          )\n          : 'Not found'}\n      </ul>\n    </div>\n  );\n});\n","import React, { useState, ChangeEvent } from 'react';\nimport { usePostsContext } from '../../customHooks/usePostsContext';\nimport './NewCommentForm.scss';\n\ntype ChangeEventHTML = HTMLInputElement | HTMLTextAreaElement;\n\nexport const NewCommentForm: React.FC = React.memo(() => {\n  const { comments, setComments, selectedPostId } = usePostsContext();\n  const [userName, setUserName] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [userComment, setUserComment] = useState('');\n\n  const resetForm = () => {\n    setUserName('');\n    setUserEmail('');\n    setUserComment('');\n  };\n\n  const handleChange = (event: ChangeEvent<ChangeEventHTML>) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'userName':\n        setUserName(value);\n        break;\n      case 'userEmail':\n        setUserEmail(value);\n        break;\n      case 'userComment':\n        setUserComment(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newComment = {\n      id: new Date().valueOf(),\n      postId: selectedPostId,\n      body: userComment,\n      name: userName,\n      email: userEmail,\n    };\n\n    setComments([...comments, newComment]);\n    resetForm();\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"userName\"\n          value={userName}\n          onChange={handleChange}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"userEmail\"\n          value={userEmail}\n          onChange={handleChange}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"userComment\"\n          value={userComment}\n          onChange={handleChange}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (endpoint: string, method?:RequestInit) => {\n  return fetch(`${BASE_URL}${endpoint}`, method)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n","import { Post } from '../types/Post';\nimport { request } from './api';\n\nexport const getAllPosts = (endpoint?: string) => {\n  if (endpoint) {\n    return request(`/posts${endpoint}`);\n  }\n\n  return request('/posts');\n};\n\nexport const getUserPosts = (userId?: number): Promise<Post[]> => {\n  if (!userId) {\n    return getAllPosts();\n  }\n\n  return getAllPosts(`/?userId=${userId}`);\n};\n\nexport const getPostDetails = (postId: number): Promise<Post> => (\n  getAllPosts(`/${postId}`)\n);\n","import { Comment } from '../types/Comment';\nimport { request } from './api';\n\nexport const getPostComments = (postId: number): Promise<Comment[]> => (\n  request(`/comments?postId=${postId}`)\n);\n\nexport const postComment = (newComment: Comment): Promise<Comment> => (\n  request('/comments', {\n    method: 'POST',\n    body: JSON.stringify(newComment),\n  })\n);\n\nexport const deleteComment = (commentId: number) => (\n  request(`/comments/${commentId}`, {\n    method: 'DELETE',\n  })\n);\n","import React, { useEffect, useState } from 'react';\nimport { usePostsContext } from '../../customHooks/usePostsContext';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport './PostDetails.scss';\nimport { Post } from '../../types/Post';\nimport { deleteComment, getPostComments } from '../../api/comments';\n\nexport const PostDetails: React.FC = React.memo(() => {\n  const { selectedPostId, comments, setComments } = usePostsContext();\n  const [postDetails, setPostDetails] = useState<Post>();\n  const [isCommentsVisible, setIsCommentsVisible] = useState(true);\n\n  const handleClick = () => {\n    setIsCommentsVisible((state) => !state);\n  };\n\n  const loadPostDetails = () => {\n    getPostDetails(selectedPostId)\n      .then(setPostDetails);\n  };\n\n  const loadPostComments = () => {\n    getPostComments(selectedPostId)\n      .then(setComments);\n  };\n\n  const toDeleteComment = (commentId = 0) => {\n    deleteComment(commentId);\n    const filteredComments = comments.filter(\n      comment => comment.id !== commentId,\n    );\n\n    setComments(filteredComments);\n  };\n\n  useEffect(() => {\n    Promise.all([loadPostDetails(), loadPostComments()]);\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails?.body}</p>\n      </section>\n\n      {comments.length > 0 && (\n        <section className=\"PostDetails__comments\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={handleClick}\n          >\n            {isCommentsVisible\n              ? (\n                `Hide ${comments.length} comment(s)`\n              ) : (\n                `Show ${comments.length} comment(s)`\n              )}\n          </button>\n\n          {isCommentsVisible && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(({ id, body }) => (\n                <li key={id} className=\"PostDetails__list-item\">\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => toDeleteComment(id)}\n                  >\n                    X\n                  </button>\n                  <p>{body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm />\n        </div>\n      </section>\n    </div>\n  );\n});\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { PostsContext } from './contexts/PostsContext';\nimport { getUserPosts } from './api/posts';\nimport { getUsers } from './api/users';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\nconst App: React.FC = () => {\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const loadPosts = (userId?: number) => {\n    getUserPosts(userId)\n      .then(setPosts);\n  };\n\n  const loadUsers = () => {\n    getUsers()\n      .then(data => setUsers(data.slice(0, 8)));\n  };\n\n  useEffect(() => {\n    Promise.all([loadPosts(), loadUsers()]);\n  }, []);\n\n  return (\n    <PostsContext.Provider value={{\n      selectedPostId,\n      setSelectedPostId,\n      posts,\n      setPosts,\n      comments,\n      setComments,\n    }}\n    >\n      <div className=\"App\">\n        <header className=\"App__header\">\n          <label>\n            Select a user: &nbsp;\n\n            <select\n              className=\"App__user-selector\"\n              onChange={(event) => {\n                loadPosts(Number(event.target.value));\n              }}\n            >\n              <option value=\"0\">All users</option>\n              {users.map(user => (\n                <option key={user.id} value={user.id}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n        </header>\n\n        <main className=\"App__main\">\n          <div className=\"App__sidebar\">\n            <PostsList />\n          </div>\n\n          <div className=\"App__content\">\n            {Boolean(selectedPostId) && <PostDetails />}\n          </div>\n        </main>\n      </div>\n    </PostsContext.Provider>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getUsers = () => request('/users');\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}